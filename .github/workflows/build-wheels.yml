name: Build & Deploy ale-py

on:
  push:
    branches:
      - master
    tags:
      - 'v*'

jobs:
  build:
    name: Build ale-py on ${{ matrix.os }}
    runs-on: ${{ matrix.os }}
    strategy:
      matrix:
        os: [ubuntu-latest, windows-latest, macos-latest]
    steps:
    - uses: actions/checkout@v1
    - uses: actions/setup-python@v1
      name: Install Python ${{ matrix.python_version }}
      with:
        python-version: "3.7"
    - name: Install dependencies
      run: |
        python -m pip install git+https://github.com/mayeut/cibuildwheel.git@github-workflows
    - name: Build wheels 
      run: |
        env
        cibuildwheel --output-dir wheelhouse
      env:
        CIBW_SKIP: "*i686* *win32* cp27*"
        CIBW_TEST_REQUIRES: "pytest"
        CIBW_TEST_COMMAND: "pytest {project}/ale_py"
        CIBW_ENVIRONMENT: "GITHUB_REF=${GITHUB_REF}"
        CIBW_ENVIRONMENT_WINDOWS: "GITHUB_REF=${GITHUB_REF} ALE_PY_CMAKE_ARGS=\"-DCMAKE_TOOLCHAIN_FILE='${VCPKG_INSTALLATION_ROOT}/scripts/buildsystems/vcpkg.cmake' -DVCPKG_TARGET_TRIPLET='x64-windows-static'\""
        CIBW_BEFORE_BUILD_LINUX: "yum install -y zlib-devel"
        CIBW_BEFORE_BUILD_WINDOWS: "vcpkg --triplet x64-windows-static install zlib"
        CIBW_BUILD_VERBOSITY: "3"
    - uses: actions/upload-artifact@v1
      with:
        name: wheels
        path: wheelhouse
  release:
    name: Deploy ale-py to PyPi & Github
    runs-on: ubuntu-latest
    needs: build
    steps:
      - uses: actions/download-artifact@v1
        with:
          name: wheels
      - name: Publish to PyPi Test
        if: startsWith(github.ref, 'refs/tags/') == false
        uses: pypa/gh-action-pypi-publish@master 
        with:
          user: __token__
          password: ${{ secrets.pypi_password }}
          repository_url: https://test.pypi.org/legacy/
          packages_dir: wheels/
      - name: Create Release
        if: startsWith(github.ref, 'refs/tags/')
        uses: actions/create-release@v1.0.0
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          tag_name: ${{ github.ref }}
          release_name: Release ${{ github.ref }}
          draft: true
          prerelease: false
